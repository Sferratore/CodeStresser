import os
import unittest
import pandas as pd
import joblib
import tempfile
import shutil
from prod.VulnerabilityReportGenerator import VulnerabilityReportGenerator
from sklearn.dummy import DummyClassifier, DummyRegressor
from sklearn.preprocessing import StandardScaler

class TestVulnerabilityReportGenerator(unittest.TestCase):
    def setUp(self):
        # Setup temporary directory and test file
        self.test_dir = tempfile.mkdtemp()
        self.safe_file = os.path.join(self.test_dir, "safe.py")
        self.vulnerable_file = os.path.join(self.test_dir, "vuln.py")
        self.syntax_error_file = os.path.join(self.test_dir, "broken.py")

        # Benign code
        with open(self.safe_file, "w") as f:
            f.write("print('Hello')\ndef foo():\n    return 42\n")

        # Vulnerable code (dangerous eval)
        with open(self.vulnerable_file, "w") as f:
            f.write("def dangerous():\n    eval(input())\n")

        # Code with syntax error
        with open(self.syntax_error_file, "w") as f:
            f.write("def broken(:\n    pass\n")

        # Train dummy models and scaler on synthetic data
        dummy_X = pd.DataFrame([[0] * 12])
        dummy_y_class = ["Medium"]
        dummy_y_reg = [0.75]

        self.dummy_severity = DummyClassifier(strategy="most_frequent")
        self.dummy_severity.fit(dummy_X, dummy_y_class)

        self.dummy_confidence = DummyRegressor(strategy="mean")
        self.dummy_confidence.fit(dummy_X, dummy_y_reg)

        self.scaler = StandardScaler()
        self.scaler.fit(dummy_X)

        self.severity_path = os.path.join(self.test_dir, "sev.pkl")
        self.confidence_path = os.path.join(self.test_dir, "conf.pkl")
        self.scaler_path = os.path.join(self.test_dir, "scaler.pkl")

        joblib.dump(self.dummy_severity, self.severity_path)
        joblib.dump(self.dummy_confidence, self.confidence_path)
        joblib.dump(self.scaler, self.scaler_path)

        self.reporter = VulnerabilityReportGenerator(
            self.severity_path,
            self.confidence_path,
            self.scaler_path
        )

    def tearDown(self):
        shutil.rmtree(self.test_dir)

    def test_analyze_safe_file(self):
        reports = self.reporter.analyze_path(self.safe_file)
        self.assertIsInstance(reports, list)
        self.assertEqual(len(reports), 0)

    def test_analyze_vulnerable_file(self):
        reports = self.reporter.analyze_path(self.vulnerable_file)
        self.assertGreater(len(reports), 0)
        for r in reports:
            self.assertIn("severity", r)
            self.assertIn("confidence", r)
            self.assertIn("suggested_fix", r)
            self.assertEqual(r["severity"], "Medium")
            self.assertEqual(r["confidence"], 0.75)

    def test_analyze_syntax_error_file(self):
        reports = self.reporter.analyze_path(self.syntax_error_file)
        self.assertEqual(len(reports), 0)

    def test_suggest_fix_default(self):
        fix = self.reporter._suggest_fix("Unknown Issue")
        self.assertIn("standard security practices", fix)

if __name__ == "__main__":
    unittest.main()
