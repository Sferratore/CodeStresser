import pandas as pd
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import joblib

class VulnerabilityModelTrainer:
    def __init__(self):
        # Initialize a standard scaler to normalize the input features
        self.scaler = StandardScaler()

        # Separate models for predicting severity and confidence
        self.model_severity = RandomForestClassifier(n_estimators=100, random_state=42)
        self.model_confidence = RandomForestRegressor(n_estimators=100, random_state=42)

    def load_data(self, data: pd.DataFrame):
        """
        Load features and separate targets (severity and confidence).
        :param data: A pandas DataFrame containing features and 'severity' and 'confidence' columns.
        """
        self.X = data.drop(columns=["severity", "confidence"])
        self.y_severity = data["severity"]
        self.y_confidence = data["confidence"]

    def preprocess(self):
        """
        Normalize the features using standard scaling (zero mean, unit variance).
        """
        self.X_scaled = self.scaler.fit_transform(self.X)

    def train(self, test_size=0.25):
        """
        Split the data, train two Random Forest models, and return their accuracy.
        :param test_size: Proportion of the dataset used for testing.
        :return: Tuple (severity_model_accuracy, confidence_model_accuracy)
        """
        # Train classifier for severity (discrete)
        X_train_sev, X_test_sev, y_train_sev, y_test_sev = train_test_split(
            self.X_scaled, self.y_severity, test_size=test_size, random_state=42
        )
        self.model_severity.fit(X_train_sev, y_train_sev)
        acc_severity = self.model_severity.score(X_test_sev, y_test_sev)

        # Train regressor for confidence (continuous)
        X_train_conf, X_test_conf, y_train_conf, y_test_conf = train_test_split(
            self.X_scaled, self.y_confidence, test_size=test_size, random_state=42
        )
        self.model_confidence.fit(X_train_conf, y_train_conf)
        r2_confidence = self.model_confidence.score(X_test_conf, y_test_conf)  # RÂ² score

        return acc_severity, r2_confidence

    def save(self, severity_path="severity_model.pkl", confidence_path="confidence_model.pkl", scaler_path="scaler.pkl"):
        """
        Save the trained models and the scaler to disk.
        :param severity_path: Path to save the severity model.
        :param confidence_path: Path to save the confidence model.
        :param scaler_path: Path to save the fitted scaler.
        """
        joblib.dump(self.model_severity, severity_path)
        joblib.dump(self.model_confidence, confidence_path)
        joblib.dump(self.scaler, scaler_path)
