import pandas as pd
from prod.VulnerabilityModelTrainer import VulnerabilityModelTrainer

class VulnerabilityModelPipeline:
    def __init__(self,
                 data_path="../training_data/training_data.csv",
                 model_path="../model/rf_model.pkl",
                 scaler_path="../model/scaler.pkl"):
        """
        Initializes the training pipeline with paths to the dataset and output files.

        :param data_path: Path to the CSV file containing the dataset with features and labels.
        :param model_path: Path where the trained Random Forest model will be saved.
        :param scaler_path: Path where the fitted StandardScaler will be saved.
        """
        self.data_path = data_path
        self.model_path = model_path
        self.scaler_path = scaler_path
        self.trainer = VulnerabilityModelTrainer()

    def run(self):
        """
        Executes the full machine learning pipeline:
        - Loads the dataset
        - Preprocesses features
        - Trains a Random Forest model
        - Saves the trained model and scaler
        """
        print("[*] Loading data...")
        data = pd.read_csv(self.data_path)

        print("[*] Loading into trainer...")
        self.trainer.load_data(data)

        print("[*] Preprocessing data...")
        self.trainer.preprocess()

        print("[*] Training model...")
        accuracy = self.trainer.train()
        print(f"[+] Model trained with accuracy: {accuracy:.2f}")

        print("[*] Saving model and scaler...")
        self.trainer.save(self.model_path, self.scaler_path)
        print(f"[+] Model saved to: {self.model_path}")
        print(f"[+] Scaler saved to: {self.scaler_path}")

if __name__ == "__main__":
    pipeline = VulnerabilityModelPipeline()
    pipeline.run()
