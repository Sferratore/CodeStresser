import pandas as pd
from prod.VulnerabilityModelTrainer import VulnerabilityModelTrainer


class VulnerabilityModelPipeline:
    def __init__(self, data_path: str, model_path="rf_model.pkl", scaler_path="scaler.pkl"):
        """
        Initializes the training pipeline with paths to the dataset and output files.

        :param data_path: Path to the CSV file containing the dataset with features and labels.
        :param model_path: Path where the trained Random Forest model will be saved.
        :param scaler_path: Path where the fitted StandardScaler will be saved.
        """
        self.data_path = data_path
        self.model_path = model_path
        self.scaler_path = scaler_path

        # Instantiate the trainer, which handles preprocessing and training logic
        self.trainer = VulnerabilityModelTrainer()

    def run(self):
        """
        Executes the full machine learning pipeline:
        - Loads the dataset
        - Preprocesses features
        - Trains a Random Forest model
        - Saves the trained model and scaler
        """
        print("[*] Loading data...")
        # Read the dataset from CSV; must include a 'label' column for supervised learning
        data = pd.read_csv(self.data_path)

        print("[*] Loading into trainer...")
        # Pass the data into the trainer for further processing
        self.trainer.load_data(data)

        print("[*] Preprocessing data...")
        # Standardize the feature columns using StandardScaler
        self.trainer.preprocess()

        print("[*] Training model...")
        # Split the data, train the model, and get accuracy on the test set
        accuracy = self.trainer.train()
        print(f"[+] Model trained with accuracy: {accuracy:.2f}")

        print("[*] Saving model and scaler...")
        # Serialize and save both the trained model and the scaler to disk
        self.trainer.save(self.model_path, self.scaler_path)
        print(f"[+] Model saved to: {self.model_path}")
        print(f"[+] Scaler saved to: {self.scaler_path}")


if __name__ == "__main__":
    # Example run: Launch the pipeline with a specified dataset
    pipeline = VulnerabilityModelPipeline(data_path="data/feature_vectors.csv")
    pipeline.run()
